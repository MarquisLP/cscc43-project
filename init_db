DROP DATABASE IF EXISTS MyBNB;
CREATE DATABASE MyBNB;
USE MyBNB;

CREATE TABLE Listing (
    ListingID CHAR(20)  NOT NULL,
    Type VARCHAR(100) NOT NULL,
    Latitude REAL NOT NULL,
    Longitude REAL NOT NULL,
    PRIMARY KEY (ListingID)
);

CREATE TABLE Availability (
    ListingID CHAR(20) NOT NULL,
    StartDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    EndDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    Price INT NOT NULL CHECK (Price >= 0),
    PRIMARY KEY (ListingID, StartDate, EndDate),
    FOREIGN KEY (ListingID) REFERENCES Listing(ListingID) ON DELETE CASCADE,
    CHECK (StartDate <= EndDate)
);

CREATE TABLE Amenities (
    ListingID CHAR(20),
    NumberOfGuests INT DEFAULT 1 CHECK (NumberOfGuests >= 0),
    Bathrooms REAL DEFAULT 0 CHECK (Bathroooms >= 0),
    Bedrooms INT DEFAULT 0 CHECK (Bedrooms >= 0),
    Beds INT DEFAULT 0 CHECK (Beds >= 0),
    Kitchen INT DEFAULT 0 CHECK (Kitchen >= 0),
    ParkingSpots INT DEFAULT 0 CHECK (ParkingSpots >= 0),
    FOREIGN KEY (ListingID) REFERENCES  Listing(ListingID) ON DELETE CASCADE
);

CREATE TABLE Address (
    Country VARCHAR(20) NOT NULL,
    PostalCode VARCHAR(10) NOT NULL,
    City VARCHAR(30) NOT NULL,
    PRIMARY KEY (Country, PostalCode)
);

CREATE TABLE User (
    SIN VARCHAR(20) NOT NULL,
    Name VARCHAR(30) NOT NULL,
    Occupation VARCHAR(20),
    DateOfBirth DATE NOT NULL,
    PRIMARY KEY (SIN)
);

CREATE TABLE Host (
    SIN VARCHAR(20) NOT NULL,
    FOREIGN KEY (SIN) REFERENCES User(SIN) ON DELETE CASCADE
);

CREATE TABLE Renter (
    SIN VARCHAR(20) NOT NULL,
    CreditCardNumber CHAR(16),
    FOREIGN KEY (SIN) REFERENCES User(SIN) ON DELETE CASCADE
);
 
CREATE TABLE LocatedAt (
    ListingID CHAR(20) NOT NULL,
    Country VARCHAR(20) NOT NULL,
    PostalCode VARCHAR(10) NOT NULL,
    FOREIGN KEY (ListingID) REFERENCES Listing(ListingID) ON DELETE CASCADE,
    FOREIGN KEY (Country, PostalCode)
REFERENCES Address(Country, PostalCode)
);


CREATE TABLE ResidesAt (
    SIN VARCHAR(20) NOT NULL,
    Country VARCHAR(20) NOT NULL,
    PostalCode VARCHAR(20) NOT NULL,
    FOREIGN KEY (SIN) REFERENCES User(SIN) ON DELETE CASCADE,
    FOREIGN KEY (Country, PostalCode) REFERENCES Address(Country, PostalCode)
);

CREATE TABLE HostedBy (
    ListingID Char(20) NOT NULL,
    SIN VARCHAR(20) NOT NULL,
    FOREIGN KEY (ListingID) REFERENCES Listing(ListingID) ON DELETE CASCADE,
    FOREIGN KEY (SIN) REFERENCES Host(SIN) ON DELETE CASCADE
);

CREATE TABLE Booking (
    ListingID CHAR(20) NOT NULL,
    StartDate DATETIME NOT NULL,
    EndDate DATETIME NOT NULL,
    SIN VARCHAR(20) NOT NULL,
    Cancelled BIT(1) DEFAULT 0,
    FOREIGN KEY (ListingID, StartDate, EndDate) REFERENCES Availability(ListingID, StartDate, EndDate) ON DELETE CASCADE,
    FOREIGN KEY (SIN) REFERENCES Renter(SIN) ON DELETE CASCADE
);


CREATE TABLE ListingReview (
    ListingID CHAR(20) NOT NULL,
    SIN VARCHAR(20) NOT NULL,
    Comment VARCHAR(250),
    Rating INT NOT NULL CHECK (Rating >= 1 AND Rating <= 5),
    FOREIGN KEY (ListingID) REFERENCES Listing(ListingID) ON DELETE CASCADE,
    FOREIGN KEY (SIN) REFERENCES Renter(SIN)
);


CREATE TABLE HostReview (
    HostSIN VARCHAR(20) NOT NULL,
    RenterSIN VARCHAR(20) NOT NULL,
    Comment VARCHAR(250),
    Rating INT NOT NULL CHECK (Rating >= 1 AND Rating <= 5),
    FOREIGN KEY (HostSIN) REFERENCES Host(SIN) ON DELETE CASCADE,
    FOREIGN KEY (RenterSIN) REFERENCES Renter(SIN)
);

CREATE TABLE RenterReview (
    HostSIN VARCHAR(20) NOT NULL,
    RenterSIN VARCHAR(20) NOT NULL,
    Comment VARCHAR(250),
    Rating INT NOT NULL CHECK (Rating >= 1 AND Rating <= 5),
    FOREIGN KEY (RenterSIN) REFERENCES Renter(SIN) ON DELETE CASCADE,
    FOREIGN KEY (HostSIN) REFERENCES Host(SIN)
);

DELIMITER //
CREATE TRIGGER DeleteListingChecker BEFORE DELETE ON Listing
    FOR EACH ROW
    BEGIN
        IF EXISTS (
            SELECT
                *
            FROM
                Booking AS b
            WHERE
                b.ListingID = OLD.ListingID 
                AND b.Cancelled = 0
        )
        THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'REJECTED';
        END IF;
    END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER InsertListingReviewChecker BEFORE INSERT ON ListingReview
    FOR EACH ROW
    BEGIN
        IF NOT EXISTS (
            SELECT
                *
            FROM
                Booking AS b
                INNER JOIN Availability AS a ON (
                    a.ListingID = b.ListingID
                    AND a.StartDate = b.StartDate
                    AND a.EndDate = b.EndDate
                )
            WHERE
                b.Cancelled = 0
                AND b.SIN = NEW.SIN
                AND b.ListingID = NEW.ListingID
                AND a.EndDate < CURRENT_TIMESTAMP
        ) THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'REJECTED';
        END IF;
    END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER InsertHostReviewChecker BEFORE INSERT ON HostReview
    FOR EACH ROW
    BEGIN
        IF NOT EXISTS (
            SELECT
                *
            FROM
                HostedBy AS h
                INNER JOIN Listing AS l
                INNER JOIN Availability AS a
                INNER JOIN Booking AS b ON (
                    h.ListingID = l.ListingID
                    AND h.ListingID = b.ListingID
                )
            WHERE
                b.Cancelled = 0
                AND b.SIN = NEW.RenterSIN
                AND b.ListingID = h.ListingID
                AND h.SIN = NEW.HostSIN
                AND a.EndDate < CURRENT_TIMESTAMP
        ) THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'REJECTED';
        END IF;
    END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER InsertRenterReviewChecker BEFORE INSERT ON RenterReview
    FOR EACH ROW
    BEGIN
        IF NOT EXISTS (
            SELECT
                *
            FROM
                HostedBy AS h
                INNER JOIN Listing AS l
                INNER JOIN Availability AS a
                INNER JOIN Booking AS b ON (
                    h.ListingID = l.ListingID
                    AND h.ListingID = b.ListingID
                )
            WHERE
                b.Cancelled = 0
                AND b.SIN = NEW.RenterSIN
                AND b.ListingID = h.ListingID
                AND h.SIN = NEW.HostSIN
                AND a.EndDate < CURRENT_TIMESTAMP
        ) THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'REJECTED';
        END IF;
    END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER UpdateAvailabilityChecker BEFORE UPDATE ON Availability
    FOR EACH ROW
    BEGIN
        IF EXISTS (
            SELECT
                *
            FROM
                Booking AS b
            WHERE
                b.ListingID = OLD.ListingID 
                AND b.StartDate = OLD.StartDate
                AND b.EndDate = OLD.EndDate
                AND b.Cancelled = 0
        )
        THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'REJECTED';
        END IF;
    END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER DeleteHostChecker BEFORE DELETE ON User
    FOR EACH ROW
    BEGIN
        IF EXISTS (
            SELECT
                *
            FROM
                User AS u
                INNER JOIN Host AS h ON u.SIN = h.SIN
                INNER JOIN HostedBy AS hb ON h.SIN = hb.SIN
            WHERE
                u.SIN = OLD.SIN
        )
        THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'REJECTED';
        END IF;
    END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER DeleteHostTablePreventer BEFORE DELETE ON Host
    FOR EACH ROW
    BEGIN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'You may not delete from the Host table directly. Delete from User table instead.';
    END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER DeleteRenterTablePreventer BEFORE DELETE ON Renter
    FOR EACH ROW
    BEGIN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'You may not delete from the Renter table directly. Delete from User table instead.';
    END//
DELIMITER ;
